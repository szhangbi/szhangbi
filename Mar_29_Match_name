from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from tqdm import tqdm
import time
import pandas as pd
pd.set_option('display.max_rows',300)


import jieba
jieba.load_userdict("E:/Justice/District_diction.txt")
import jieba.posseg as pseg
import json

file = open("E:/Justice/District.json", 'r', encoding='utf-8')
district = json.load(file)
file.close()

import pickle

from collections import defaultdict
import signal

def process_name(df):
    Diction = dict()
    print("Processing names:\n")
    with tqdm(total=len(df.iloc[:,0])) as pbar:
        for index  in range(len(df.iloc[:,0])):
            name = df['name'][index]
            if type(name) == type("string"):
                if "公司" in name:
                    n = name.replace("公司", "").replace("某", "").replace("有限", "")
                    if len(n) > 1:
                        province = df['province'][index]
                        city = df['city'][index]
                        if province in Diction.keys():
                            if city in Diction[province].keys():
                                Diction[province][city].append(name)
                            else:
                                Diction[province][city]=[name]
                        else:
                            Diction[province]=dict()
                            Diction[province][city]=[name]
            pbar.update(1)
    return Diction


def get_district(word,diction=district):
    result=defaultdict(list)
    output=pseg.cut(word)

    for word, flag in output:
        result[flag].append(word)

    province = '未知省份'
    city = '未知城市'

    for prov in diction.keys():
        for ns in result[u'ns']:
            if ns == prov or ns==prov.replace("市","").replace("省","").replace("自治区","").replace("壮族","").replace("回族","").replace("蒙古族","").replace("维吾尔族",""):
                 province = prov
        for pref in diction[prov].keys():
            for ns in result[u'ns']:
                if ns == pref or ns == pref.replace("市",""):
                     city = pref
                     province = prov
            for county in diction[prov][pref]:
                for ns in result[u'ns']:
                    if ns == county or ns == county.replace ("区","").replace("县",""):
                        city = pref
                        province = prov
    return province, city

def proces_name_get_district(df):
    Diction = dict()
    print("Processing names and getting district:\n")
    with tqdm(total=len(df.iloc[:,0])) as pbar:
        for name in df.iloc[:, 0]:
            if type(name) == type("string"):
                if "公司" in name:
                    n = name.replace("公司", "").replace("某", "").replace("有限", "")
                    if len(n) > 1:
                        province, city = get_district(n)
                    if province in Diction.keys():
                        if city in Diction[province].keys():
                            Diction[province][city].append(name)
                        else:
                            Diction[province][city]=[name]
                    else:
                        Diction[province]=dict()
                        Diction[province][city]=[name]
            pbar.update(1)
    return Diction

def match_term(term1, list_name, min_score=0):
    max_score = -1
    matached_name = ""
    for term2 in list_name:
        if term1 == term2:
            break
        score = fuzz.ratio(term1, term2)
        if (score>max_score) & (score>min_score):
            max_score=score
            matached_name = term2
    return (matached_name, max_score)

def match_list(list1, list2, min_score=0):
    matched_list = []
    with tqdm(total=len(list1)) as pbar:
        for term1 in list1:
            term2, score = match_term(term1, list2,min_score)
            matched_list.append((term1, term2, score))
            pbar.update(1)
    return matched_list


if __name__ == '__main__':


    #
    # basic= pd.read_csv("E:\Justice\company_basic_all.txt", encoding = "utf-8")
    # uniq= pd.read_csv("E:\Justice\company_name_unique_list.txt", encoding = "utf-8")

    #n1 = process_name(basic)
    #n2 = proces_name_get_district(uniq)


    # with open('E:/Justice/n1.pkl', 'wb') as outfile1:
    #     pickle.dump(n1, outfile1)
    #     outfile1.close()
    with open('E:/Justice/n1.pkl', 'rb') as infile1:
        D1=pickle.load(infile1)
    # with open('E:/Justice/n2.pkl', 'wb') as outfile2:
    #     pickle.dump(n2, outfile2)
    #     outfile2.close()
    with open('E:/Justice/n2.pkl', 'rb') as infile2:
        D2=pickle.load(infile2)

    # with open('E:/Justice/codebook.pkl', 'rb') as infile3:
    #     codebook = pickle.load(infile3)

    with open("processed_city.txt", "rb") as infile4:  # Unpickling
        processed_city = pickle.load(infile4)

    # start = time.perf_counter()
    # process.extract(n1[0],n2,limit=1)
    # elapsed = (time.perf_counter() - start)
    # print("Time used:", elapsed)
    #
    # start = time.perf_counter()
    # print(match_term(n1[0],n2))
    # elapsed = (time.perf_counter() - start)
    # print("Time used:", elapsed)


    # start = time.perf_counter()
    # result = match_list(n2[0:5], n1, 85)
    # elapsed = (time.perf_counter() - start)
    # print(result)
    # print("Time used:", elapsed)

    result =pd.DataFrame(columns={'name_uniq', 'name_basic', 'score', 'city'})
    try:
        for prov in D2.keys():
            if prov in D1.keys():
                for city in D2[prov].keys():
                    if (city in D1[prov].keys()) and (city not in processed_city):
                        print("Processing"+city+": \n")
                        to_add=pd.DataFrame(match_list(D2[prov][city], D1[prov][city] , min_score=80),columns={'name_uniq', 'name_basic', 'score'})
                        to_add['city']=city
                        result=pd.concat((result,to_add),axis=0, sort=False)
                        processed_city.append(city)
    except BaseException as e:
        result.to_csv("E:/Justice/result2.csv",  mode='a', encoding="gbk")
        with open("processed_city.txt", "wb") as outfile4:  # Pickling
            pickle.dump(processed_city, outfile4)
